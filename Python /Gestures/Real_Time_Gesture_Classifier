import asyncio
import numpy as np
import joblib
from collections import deque
from bleak import BleakScanner, BleakClient
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import threading
from calibration_matrix import A_INV

# === Configuration ===
UART_RX_CHAR_UUID = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"
DEVICE_NAME_SUBSTR = "ESP32-BNO055-BLE"
FS = 30.0
WINDOW_SIZE = 90
REFRESH_MS = 100  # plot update rate

# Load trained model
model = joblib.load("gesture_model.pkl")
buffer = deque(maxlen=WINDOW_SIZE)
last_prediction = ["..."]  # To access across plot updates

# === Feature Extraction ===
def extract_features(samples):
    samples = np.array(samples)
    features = []
    for i in range(6):  # 3 accel, 3 gyro
        axis = samples[:, i]
        features.append([
            np.mean(axis), np.std(axis),
            np.max(axis), np.min(axis),
            np.ptp(axis)
        ])
    return np.array(features).flatten().reshape(1, -1)

# === BLE Notification Handler ===
def handle_rx(_, data):
    try:
        fields = list(map(float, data.decode().strip().split(",")))
        if len(fields) < 6:
            return
        acc = A_INV @ np.array(fields[0:3])
        gyr = A_INV @ np.array(fields[3:6])
        buffer.append(np.hstack((acc, gyr)))
    except:
        pass

# === BLE Connection Thread ===
async def start_ble():
    print(" Scanning for ESP32...")
    devices = await BleakScanner.discover(timeout=5.0)
    tgt = next((d for d in devices if d.name and DEVICE_NAME_SUBSTR in d.name), None)
    if not tgt:
        print(" ESP32 not found.")
        return
    async with BleakClient(tgt.address) as client:
        print(f"Connected to {tgt.name}")
        await client.start_notify(UART_RX_CHAR_UUID, handle_rx)
        while True:
            await asyncio.sleep(0.1)

# === Plot Setup ===
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6))
lines1 = [ax1.plot([], [], label=lbl)[0] for lbl in ["ax", "ay", "az"]]
lines2 = [ax2.plot([], [], label=lbl)[0] for lbl in ["gx", "gy", "gz"]]

for ax in (ax1, ax2):
    ax.set_xlim(0, WINDOW_SIZE / FS)
    ax.set_ylim(-15, 15)
    ax.grid(); ax.legend()

ax1.set_title("Accelerometer (body-frame)")
ax2.set_title("Gyroscope (body-frame)")
text_box = ax1.text(0.75, 1.05, "", transform=ax1.transAxes,
                    fontsize=14, bbox=dict(facecolor='white'))

# === Plot Animation Update ===
def update_plot(_):
    if len(buffer) == 0:
        return lines1 + lines2 + [text_box]

    t = np.arange(len(buffer)) / FS
    data = np.array(buffer)

    for i, line in enumerate(lines1):
        line.set_data(t, data[:, i])
    for i, line in enumerate(lines2):
        line.set_data(t, data[:, i+3])
    ax1.set_xlim(t[0], t[-1] + 0.01)

    if len(buffer) == WINDOW_SIZE:
        feats = extract_features(data)
        pred = model.predict(feats)[0]
        last_prediction[0] = pred
        print(f"Predicted: {pred}")
        buffer.clear()

    text_box.set_text(f"Gesture: {last_prediction[0]}")
    return lines1 + lines2 + [text_box]

# === Start Everything ===
if __name__ == "__main__":
    threading.Thread(target=lambda: asyncio.run(start_ble()), daemon=True).start()
    ani = animation.FuncAnimation(
        fig, update_plot, interval=REFRESH_MS, blit=True, cache_frame_data=False
    )
    plt.tight_layout()
    plt.show()
