import sys
import matplotlib
matplotlib.use("tkagg")  # Ensure GUI-compatible backend

# Windows + Python 3.13 fix for Bleak threading
try:
    from bleak.backends.winrt.util import uninitialize_sta
    uninitialize_sta()
except ImportError:
    pass

import asyncio
import threading
from bleak import BleakScanner, BleakClient
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import deque
from datetime import datetime

# UUID for BLE characteristic receiving data
UART_RX_CHAR_UUID = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

# Rolling buffers for graph (last N samples)
N = 100
acc_x = deque([0.0] * N, maxlen=N)
acc_y = deque([0.0] * N, maxlen=N)
acc_z = deque([0.0] * N, maxlen=N)

# Smoothing state
smoothed_x, smoothed_y, smoothed_z = 0.0, 0.0, 0.0
alpha = 0.2  # smoothing factor (0 = slow, 1 = raw)

# Shutdown signal for BLE thread
stop_event = threading.Event()

# Plot setup
fig, ax = plt.subplots()
line_x, = ax.plot(range(N), acc_x, label="AccX")
line_y, = ax.plot(range(N), acc_y, label="AccY")
line_z, = ax.plot(range(N), acc_z, label="AccZ")

ax.set_ylim(-20, 20)
ax.set_title("Live Accelerometer Data (BLE, Smoothed)")
ax.legend(loc="upper right")
ax.grid(True)

def update_plot(_):
    line_x.set_ydata(list(acc_x))
    line_y.set_ydata(list(acc_y))
    line_z.set_ydata(list(acc_z))
    return line_x, line_y, line_z

def handle_rx(_, data):
    global smoothed_x, smoothed_y, smoothed_z
    try:
        raw = data.decode().strip()
        fields = list(map(float, raw.split(",")))

        # Apply smoothing filter
        smoothed_x = alpha * fields[0] + (1 - alpha) * smoothed_x
        smoothed_y = alpha * fields[1] + (1 - alpha) * smoothed_y
        smoothed_z = alpha * fields[2] + (1 - alpha) * smoothed_z

        acc_x.append(smoothed_x)
        acc_y.append(smoothed_y)
        acc_z.append(smoothed_z)

        # Timestamped console readout
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"[{timestamp}] Accel: X={smoothed_x:6.2f}  Y={smoothed_y:6.2f}  Z={smoothed_z:6.2f}")
    except Exception as e:
        print("‚ö†Ô∏è BLE parse error:", e)

async def ble_loop():
    print("üîç Scanning for ESP32-BNO055-BLE...")
    devices = await BleakScanner.discover(timeout=5)
    target = next((d for d in devices if d.name and "ESP32-BNO055-BLE" in d.name), None)

    if not target:
        print("‚ùå ESP32 not found.")
        return

    print(f"‚úÖ Found {target.name} at {target.address}")
    async with BleakClient(target.address) as client:
        print("üîó Connected. Subscribing to BLE notifications...")
        await client.start_notify(UART_RX_CHAR_UUID, handle_rx)

        # Stay alive until the stop_event is triggered
        while not stop_event.is_set():
            await asyncio.sleep(0.1)

def start_ble_thread():
    asyncio.run(ble_loop())

def on_close(event):
    print("üõë Plot window closed. Stopping BLE loop...")
    stop_event.set()

# Attach plot close event listener
fig.canvas.mpl_connect("close_event", on_close)

# Start BLE in background
threading.Thread(target=start_ble_thread, daemon=True).start()

# Launch the plot in main thread
ani = animation.FuncAnimation(fig, update_plot, interval=33)
plt.show()
